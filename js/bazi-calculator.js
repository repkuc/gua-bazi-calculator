async function handleBaziCalculate(event) {
  event.preventDefault();

  const birthDateInput = document.getElementById("baziBirthDate").value;
  const birthTimeInput = document.getElementById("baziBirthTime").value;
  const gender = document.getElementById("baziGender").value;
  const resultElement = document.getElementById("baziResult");
  const country = document.getElementById("baziCountry").value;
  const city = document.getElementById("baziCity").value;
  const timezone = document.getElementById("baziTimezone").value;

  const longitude = 24.1; // ‚Üê –ø–æ–∫–∞ –≤—Ä—É—á–Ω—É—é –¥–ª—è –†–∏–≥–∏
  const chinaTime = convertToChinaTime(
    birthDateInput,
    birthTimeInput,
    timezone,
    longitude
  );

  const chinaDateObj = chinaTime.toJSDate();
  let chinaYear = chinaDateObj.getFullYear();
  let chinaMonth = chinaDateObj.getMonth() + 1;
  let chinaDay = chinaDateObj.getDate();
  let chinaHour = chinaDateObj.getHours();

  const browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  console.log("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–∏—Å—Ç–µ–º—É: ", browserTimeZone);
  // 2. –õ–æ–≥–∏–∫–∞ –ë–∞ –¶–∑—ã: –µ—Å–ª–∏ –≤—Ä–µ–º—è >= 23:00,
  //    —Ç–æ —ç—Ç–æ —É–∂–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.
  if (chinaHour >= 23) {
    chinaDay++;
    chinaHour = 0; // –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–≤—è—Ç 1, –Ω–æ —á–∞—â–µ 0 ‚Äî —Å—É—Ç—å, —á—Ç–æ —ç—Ç–æ –Ω–∞—á–∞–ª–æ "–Ω–æ–≤—ã—Ö —Å—É—Ç–æ–∫"

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ª–µ–∑–ª–∏ –ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ—Å—è—Ü–∞:
    const daysInMonth = new Date(chinaYear, chinaMonth, 0).getDate();
    if (chinaDay > daysInMonth) {
      chinaDay = 1;
      chinaMonth++;
      if (chinaMonth > 12) {
        chinaMonth = 1;
        chinaYear++;
      }
    }
  }

  // 3. –¢–µ–ø–µ—Ä—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª–µ–∂–∏—Ç "–ë–∞ –¶–∑—ã –¥–∞—Ç–∞"
  //    (—Å —É—á—ë—Ç–æ–º UTC+8 –∏ —Å–¥–≤–∏–≥–∞ —Å—É—Ç–æ–∫ –Ω–∞ 23:00)

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –≤—Ä–µ–º—è, hour = null
  const parsed = parseBaziDate(birthDateInput, birthTimeInput);
  const finalHour = parsed.hasHour ? chinaHour : null;

  if (!birthDateInput) {
    resultElement.textContent = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.";
    resultElement.style.display = "block";
    resultElement.style.opacity = "1";
    return;
  }

  console.log("Date: ", birthDateInput);
  console.log("Time: ", birthTimeInput || "time not set");
  console.log("Sex: ", gender);
  console.log("–°—Ç—Ä–∞–Ω–∞:", country);
  console.log("–ì–æ—Ä–æ–¥:", city);
  console.log("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", timezone);

  console.log("üí° –ß–∞—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ (chinaHour):", chinaHour);
  const bazi = getBaziPillars({
    hour: finalHour,
    year: chinaYear,
    month: chinaMonth,
    day: chinaDay,
  });

  console.log("–ë–∞ –¶–∑—ã –∫–∞—Ä—Ç–∞: ", bazi);
  displayBaziResult(bazi);
}

const heavenlyStems = [
  "Áî≤ ‚Äî –î–µ—Ä–µ–≤–æ –Ø–Ω",
  "‰πô ‚Äî –î–µ—Ä–µ–≤–æ –ò–Ω—å",
  "‰∏ô ‚Äî –û–≥–æ–Ω—å –Ø–Ω",
  "‰∏Å ‚Äî –û–≥–æ–Ω—å –ò–Ω—å",
  "Êàä ‚Äî –ó–µ–º–ª—è –Ø–Ω",
  "Â∑± ‚Äî –ó–µ–º–ª—è –ò–Ω—å",
  "Â∫ö ‚Äî –ú–µ—Ç–∞–ª–ª –Ø–Ω",
  "Ëæõ ‚Äî –ú–µ—Ç–∞–ª–ª –ò–Ω—å",
  "Â£¨ ‚Äî –í–æ–¥–∞ –Ø–Ω",
  "Áô∏ ‚Äî –í–æ–¥–∞ –ò–Ω—å",
];

const earthlyBranches = [
  "Â≠ê ‚Äî –ö—Ä—ã—Å–∞ (–í–æ–¥–∞)",
  "‰∏ë ‚Äî –ë—ã–∫ (–ó–µ–º–ª—è)",
  "ÂØÖ ‚Äî –¢–∏–≥—Ä (–î–µ—Ä–µ–≤–æ)",
  "ÂçØ ‚Äî –ö—Ä–æ–ª–∏–∫ (–î–µ—Ä–µ–≤–æ)",
  "Ëæ∞ ‚Äî –î—Ä–∞–∫–æ–Ω (–ó–µ–º–ª—è)",
  "Â∑≥ ‚Äî –ó–º–µ—è (–û–≥–æ–Ω—å)",
  "Âçà ‚Äî –õ–æ—à–∞–¥—å (–û–≥–æ–Ω—å)",
  "Êú™ ‚Äî –ö–æ–∑–∞ (–ó–µ–º–ª—è)",
  "Áî≥ ‚Äî –û–±–µ–∑—å—è–Ω–∞ (–ú–µ—Ç–∞–ª–ª)",
  "ÈÖâ ‚Äî –ü–µ—Ç—É—Ö (–ú–µ—Ç–∞–ª–ª)",
  "Êàå ‚Äî –°–æ–±–∞–∫–∞ (–ó–µ–º–ª—è)",
  "‰∫• ‚Äî –ö–∞–±–∞–Ω (–í–æ–¥–∞)",
];

// –¢–∞–±–ª–∏—Ü–∞: —Å—Ç–≤–æ–ª –≥–æ–¥–∞ (0‚Äì9) √ó –º–µ—Å—è—Ü (0‚Äì11) ‚Üí —Å—Ç–≤–æ–ª –º–µ—Å—è—Ü–∞
const monthStemTable = [
  [2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3], // Áî≤ ‚Äî –î–µ—Ä–µ–≤–æ –Ø–Ω
  [4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5], // ‰πô ‚Äî –î–µ—Ä–µ–≤–æ –ò–Ω—å
  [6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7], // ‰∏ô ‚Äî –û–≥–æ–Ω—å –Ø–Ω
  [8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], // ‰∏Å ‚Äî –û–≥–æ–Ω—å –ò–Ω—å
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1], // Êàä ‚Äî –ó–µ–º–ª—è –Ø–Ω
  [2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3], // Â∑± ‚Äî –ó–µ–º–ª—è –ò–Ω—å
  [4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5], // Â∫ö ‚Äî –ú–µ—Ç–∞–ª–ª –Ø–Ω
  [6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7], // Ëæõ ‚Äî –ú–µ—Ç–∞–ª–ª –ò–Ω—å
  [8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], // Â£¨ ‚Äî –í–æ–¥–∞ –Ø–Ω
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1], // Áô∏ ‚Äî –í–æ–¥–∞ –ò–Ω—å
];

// –¢–∞–±–ª–∏—Ü–∞: —Å—Ç–≤–æ–ª –¥–Ω—è (0‚Äì9) √ó –≤–µ—Ç–≤—å —á–∞—Å–∞ (0‚Äì11) ‚Üí —Å—Ç–≤–æ–ª —á–∞—Å–∞ (–∏–Ω–¥–µ–∫—Å 0‚Äì9)
const hourStemTable = [
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1], // Áî≤
  [2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3], // ‰πô
  [4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5], // ‰∏ô
  [6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7], // ‰∏Å
  [8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], // Êàä
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1], // Â∑±
  [2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3], // Â∫ö
  [4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5], // Ëæõ
  [6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7], // Â£¨
  [8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], // Áô∏
];

function getYearPillar(year) {
  const stemIndex = (year - 4) % 10;
  const branchIndex = (year - 4) % 12;

  const stem = heavenlyStems[stemIndex];
  const branch = earthlyBranches[branchIndex];

  //console.log("–°—Ç–æ–ª–ø –≥–æ–¥–∞: ", stem + branch);

  return {
    stemIndex,
    branchIndex,
    stem,
    branch,
    pillar: stem + branch,
  };
}

function getMonthPillar(year, month, day) {
  console.log("üåû solar2lunar input:", { year, month, day });

  const lunar = solarlunar.solar2lunar(year, month, day);
  console.log("üåï lunar response:", lunar);

  if (!lunar || !lunar.gzMonth) {
    console.warn("‚ùå –û—à–∏–±–∫–∞: solar2lunar –Ω–µ –≤–µ—Ä–Ω—É–ª gzMonth");
    return {
      stem: "?",
      branch: "?",
      stemIndex: null,
      branchIndex: null,
      pillar: "?",
    };
  }

  const stem = lunar.gzMonth[0]; // 1-–π —Å–∏–º–≤–æ–ª
  const branch = lunar.gzMonth[1]; // 2-–π —Å–∏–º–≤–æ–ª

  return {
    stem,
    branch,
    stemIndex: heavenlyStems.findIndex((s) => s.startsWith(stem)),
    branchIndex: earthlyBranches.findIndex((b) => b.startsWith(branch)),
    pillar: stem + branch,
  };
}

function getDayPillar(year, month, day) {
  const lunar = solarlunar.solar2lunar(year, month, day);

  if (!lunar || !lunar.gzDay) {
    console.warn("‚ùå –û—à–∏–±–∫–∞: solar2lunar –Ω–µ –≤–µ—Ä–Ω—É–ª gzDay");

    return {
      stem: "?",
      branch: "?",
      stemIndex: null,
      branchIndex: null,
      pillar: "–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω",
    };
  }

  const stem = lunar.gzDay[0];
  const branch = lunar.gzDay[1];

  return {
    stem,
    branch,
    stemIndex: heavenlyStems.findIndex((s) => s.startsWith(stem)),
    branchIndex: earthlyBranches.findIndex((b) => b.startsWith(branch)),
    pillar: stem + branch,
  };
}

function getHourPillar(hour, dayStemIndex) {
  if (
    hour === null ||
    dayStemIndex === null ||
    dayStemIndex < 0 ||
    dayStemIndex > 9
  ) {
    return null; // –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ
  }
  // –î–æ–±–∞–≤–ª—è–µ–º 2 —á–∞—Å–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
  // hour = (hour + 2) % 24;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∑–µ–º–Ω–æ–π –≤–µ—Ç–≤–∏ –ø–æ —á–∞—Å—É
  let branchIndex;
  if (hour >= 23 || hour < 1) {
    branchIndex = 0; // –ö—Ä—ã—Å–∞ (Â≠ê)
  } else if (hour < 3) {
    branchIndex = 1; // –ë—ã–∫ (‰∏ë)
  } else if (hour < 5) {
    branchIndex = 2; // –¢–∏–≥—Ä (ÂØÖ)
  } else if (hour < 7) {
    branchIndex = 3; // –ö—Ä–æ–ª–∏–∫ (ÂçØ)
  } else if (hour < 9) {
    branchIndex = 4; // –î—Ä–∞–∫–æ–Ω (Ëæ∞)
  } else if (hour < 11) {
    branchIndex = 5; // –ó–º–µ—è (Â∑≥)
  } else if (hour < 13) {
    branchIndex = 6; // –õ–æ—à–∞–¥—å (Âçà)
  } else if (hour < 15) {
    branchIndex = 7; // –ö–æ–∑–∞ (Êú™)
  } else if (hour < 17) {
    branchIndex = 8; // –û–±–µ–∑—å—è–Ω–∞ (Áî≥)
  } else if (hour < 19) {
    branchIndex = 9; // –ü–µ—Ç—É—Ö (ÈÖâ)
  } else if (hour < 21) {
    branchIndex = 10; // –°–æ–±–∞–∫–∞ (Êàå)
  } else {
    branchIndex = 11; // –ö–∞–±–∞–Ω (‰∫•)
  }

  const branch = earthlyBranches[branchIndex];
  console.log("–í—ã–±—Ä–∞–Ω–∞ –∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å —Å –∏–Ω–¥–µ–∫—Å–æ–º:", branchIndex, "->", branch);

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É
  const row = hourStemTable[dayStemIndex];
  if (!row || typeof row[branchIndex] === "undefined") {
    return null;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –Ω–µ–±–µ—Å–Ω–æ–≥–æ —Å—Ç–≤–æ–ª–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ
  const stemIndex = hourStemTable[dayStemIndex][branchIndex];
  const stem = heavenlyStems[stemIndex];
  console.log("–í—ã–±—Ä–∞–Ω –Ω–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º:", stemIndex, "->", stem);
  // const branch = earthlyBranches[branchIndex];
  // const stemIndex = row[branchIndex];
  // const stem = heavenlyStems[stemIndex];

  console.log("‚û°Ô∏è getHourPillar: hour =", hour);

  return {
    stem,
    stemIndex,
    branch,
    branchIndex,
    pillar: stem + branch,
  };
}

function getBaziPillars(parsed) {
  const dateObj = new Date(parsed.year, parsed.month - 1, parsed.day);

  const yearPillar = getYearPillar(parsed.year);
  const monthPillar = getMonthPillar(parsed.year, parsed.month, parsed.day);
  const dayPillar = getDayPillar(parsed.year, parsed.month, parsed.day);
  const hourPillar = getHourPillar(parsed.hour, dayPillar.stemIndex);

  return {
    year: yearPillar,
    month: monthPillar,
    day: dayPillar,
    hour: hourPillar,
  };
}

function parseBaziDate(birthDateStr, birthTimeStr) {
  // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
  const fullDateStr = birthTimeStr
    ? `${birthDateStr}T${birthTimeStr}`
    : `${birthDateStr}T12:00`; //–≤—Ä–µ–º—è ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ Date, —á—Ç–æ–±—ã –Ω–µ —É–ø–∞–ª

  const dateObj = new Date(fullDateStr); // —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã

  const year = dateObj.getFullYear(); // –ø–æ–ª—É—á–∞–µ–º –≥–æ–¥
  const month = dateObj.getMonth() + 1; // –º–µ—Å—è—Ü –æ—Ç 0 –¥–æ 11, –ø–æ—ç—Ç–æ–º—É +1
  const day = dateObj.getDate(); // —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
  // –ß–∞—Å—ã: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –≤—Ä–µ–º—è ‚Äî –±–µ—Ä—ë–º —á–∞—Å—ã –∏–∑ –¥–∞—Ç—ã, –∏–Ω–∞—á–µ null
  const hours = birthTimeStr ? dateObj.getHours() : null; // —á–∞—Å—ã (0‚Äì23)

  // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –ø–æ–∫–∞–∂–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏
  console.log("üß≠ –ì–æ–¥:", year);
  console.log("üìÖ –ú–µ—Å—è—Ü:", month);
  console.log("üìÜ –î–µ–Ω—å:", day);
  console.log("‚è∞ –ß–∞—Å—ã:", hours);

  // –í–µ—Ä–Ω—ë–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç
  return {
    year,
    month,
    day,
    hour: hours, // –ª–∏–±–æ —á–∏—Å–ª–æ, –ª–∏–±–æ null
    hasHour: !!birthTimeStr, // –±—É–ª–µ–≤–æ: true –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ, false –µ—Å–ª–∏ –Ω–µ—Ç
  };
}

function getChinaHourManually(birthDateStr, birthTimeStr) {
  if (!birthTimeStr) return null;

  const [hh, mm] = birthTimeStr.split(":").map(Number);

  let chinaHour = hh + 8;
  if (chinaHour >= 24) chinaHour -= 24;

  return chinaHour;
}

function convertToChinaTime(birthDateStr, birthTimeStr, timezone, longitude) {
  const DateTime = luxon.DateTime;

  const timePart = birthTimeStr || "12:00";
  const isoInput = `${birthDateStr}T${timePart}`;

  // 1. –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –∑–æ–Ω–µ
  const localTime = DateTime.fromISO(isoInput, { zone: timezone });
  console.log("–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:", localTime.toString());
  // 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC
  const utc = localTime.toUTC();
  console.log("UTC:", utc.toString());

  // 3. –ö–∏—Ç–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+8)
  const chinaTime = utc.setZone("Asia/Shanghai");
  console.log("–ö–∏—Ç–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è:", chinaTime.toString());
  const correctedTime = chinaTime.minus({ hours: 2 }); // —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–ø–∞–¥–∞–ª —Å–æ –≤—Å–µ–º–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞–º–∏. –∏–Ω–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–∞–∑–Ω–∏—Ü—É 2 —á–∞—Å–∞

  console.log("üìÜ UTC:", utc.toFormat("yyyy-MM-dd HH:mm"));
  console.log(
    "üá®üá≥ ChinaTime (—Ä—É—á–Ω–æ–π UTC+8):",
    chinaTime.toFormat("yyyy-MM-dd HH:mm")
  );

  return correctedTime;
}

function displayBaziResult(bazi) {
  const resultElement = document.getElementById("baziResult");

  let resultHtml = "<h3>–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –ë–∞ –¶–∑—ã: </h3>";
  resultHtml += `<p><strong>–ì–æ–¥: </strong> ${bazi.year.pillar}</p>`;
  resultHtml += `<p><strong>–ú–µ—Å—è—Ü: </strong> ${bazi.month.pillar}</p>`;
  resultHtml += `<p><strong>–î–µ–Ω—å: </strong> ${bazi.day.pillar}</p>`;
  resultHtml +=
    bazi.hour && bazi.hour.pillar
      ? `<p><strong>–ß–∞—Å: </strong> ${bazi.hour.pillar}</p>`
      : `<p><em>–ß–∞—Å–æ–≤–æ–π —Å—Ç–æ–ª–ø –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω (–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)</em></p>`;

  resultElement.innerHTML = resultHtml;
  resultElement.style.display = "block";
  setTimeout(() => {
    resultElement.style.opacity = "1";
  }, 10);
}

document
  .getElementById("baziForm")
  .addEventListener("submit", handleBaziCalculate);
